name: Build whisper.cpp addons

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 0 * * 0'  # 每周日自动运行
  push:
    branches: [ builder ]  # 当有代码推送到builder分支时

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos-arm64
          - os: macos-13
            platform: macos-x64
          - os: windows-2019
            platform: windows-cuda-118
            cuda: true
            cuda_version: '11.8.0'
          - os: windows-latest
            platform: windows-cuda-1241
            cuda: true
            cuda_version: '12.4.1'
          - os: windows-2019
            platform: windows-no-cuda
            cuda: false
          #- os: ubuntu-latest
          #  platform: linux
        
    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0
          
      # Windows 平台依赖安装
      - name: Install Windows dependencies
        if: matrix.os == 'windows-2019' || matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 根据系统版本选择合适的Visual Studio工具链
          if ("${{ matrix.os }}" -eq "windows-latest") {
            choco install windows-sdk-11-version-22h2-all -y
          } else {
            choco install windows-sdk-10-version-2004-all -y
          }
          choco install cmake -y
          npm install -g cmake-js


      # 安装 CUDA Toolkit (仅 Windows CUDA 版本)
      - name: Install CUDA Toolkit
        if: (matrix.os == 'windows-2019' || matrix.os == 'windows-latest') && matrix.cuda == true
        uses: Jimver/cuda-toolkit@v0.2.22
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_version }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      # macOS 平台依赖安装
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          brew install cmake
          npm install -g cmake-js
          
      # Linux 平台依赖安装
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git
          sudo apt-get install -y cmake
          sudo apt-get install -y libsdl2-dev
          npm install -g cmake-js
          
      # Windows 平台编译 (CUDA 支持)
      - name: Build for Windows with CUDA
        if: (matrix.os == 'windows-2019' || matrix.os == 'windows-latest') && matrix.cuda == true
        shell: powershell
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          # 设置 CUDA 相关环境变量
          $env:CUDA_PATH = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          $env:CUDA_TOOLKIT_ROOT_DIR = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          npx cmake-js compile -T addon.node -B Release --CDBUILD_SHARED_LIBS=OFF --CDWHISPER_STATIC=ON --CDGGML_CUDA=ON --runtime=electron --runtime-version=30.1.0 --arch=x64
          mkdir -p artifacts
          cp build/bin/Release/addon.node.node artifacts/addon-${{ matrix.platform }}.node
          
      # Windows 平台编译 (无 CUDA 支持)
      - name: Build for Windows without CUDA
        if: matrix.os == 'windows-2019' && matrix.cuda == false
        shell: powershell
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          
          # 设置额外的编译标志
          $env:CFLAGS = "/MP /GL /Gy /Zi"
          $env:CXXFLAGS = "/MP /GL /Gy /Zi"
          $env:LDFLAGS = "/LTCG /DEBUG"
          
          # 添加更多构建选项
          npx cmake-js compile -T addon.node -B Release `
            --CDBUILD_SHARED_LIBS=OFF `
            --CDWHISPER_STATIC=ON `
            --CDWHISPER_NO_AVX=ON `
            --CDWHISPER_NO_AVX2=ON `
            --CDWHISPER_NO_FMA=ON `
            --CDWHISPER_DEBUG=ON `
            --runtime=electron `
            --runtime-version=30.1.0 `
            --arch=x64 `
            --CDCMAKE_BUILD_TYPE=RelWithDebInfo
            
          mkdir -p artifacts
          
          # 复制必要的运行时DLL
          Copy-Item "C:\Windows\System32\msvcp140.dll" -Destination "artifacts/"
          Copy-Item "C:\Windows\System32\vcruntime140.dll" -Destination "artifacts/"
          Copy-Item "build/bin/Release/addon.node.node" -Destination "artifacts/addon-windows-no-cuda.node"
          
      # macOS Intel 平台编译
      - name: Build for macOS Intel
        if: matrix.os == 'macos-13'
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release --CDBUILD_SHARED_LIBS=OFF --CDWHISPER_STATIC=ON --runtime=electron --runtime-version=30.1.0 --arch=x64
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-macos-x64.node
          
      # macOS ARM 平台编译 (CoreML 支持)
      - name: Build for macOS ARM with CoreML
        if: matrix.os == 'macos-latest'
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release --CDBUILD_SHARED_LIBS=OFF --CDWHISPER_STATIC=ON --CDWHISPER_COREML=ON --runtime=electron --runtime-version=30.1.0 --arch=arm64
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-macos-arm64.node
          
      # Linux 平台编译
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo 'set(CMAKE_POSITION_INDEPENDENT_CODE ON)' >> CMakeLists.txt
          echo 'set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")' >> CMakeLists.txt
          echo 'set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")' >> CMakeLists.txt
          
          # 修改 ggml 的 CMakeLists.txt
          echo 'set(CMAKE_POSITION_INDEPENDENT_CODE ON)' >> ggml/CMakeLists.txt
          echo 'set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")' >> ggml/CMakeLists.txt
          echo 'set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")' >> ggml/CMakeLists.txt
          
          cd examples/addon.node
          npm install
          cd ../../
          CXXFLAGS="-fPIC" npx cmake-js compile -T addon.node -B Release --CDBUILD_SHARED_LIBS=OFF --CDWHISPER_STATIC=ON
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-linux.node
          
      # 上传构建产物作为 artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-${{ matrix.platform }}
          path: |
            artifacts/addon-${{ matrix.platform }}.node
            artifacts/*.dll
          
      # 创建或更新 Release
      - name: Create/Update Release
        uses: softprops/action-gh-release@v1
        if: github.event_name != 'pull_request'
        with:
          tag_name: latest
          name: Latest whisper.cpp builds
          body: |
            Latest whisper.cpp addon builds for multiple platforms.
            - Windows (with CUDA support)
            - Windows (without CUDA support)
            - macOS Intel
            - macOS ARM (with CoreML support)
          files: |
            artifacts/addon-${{ matrix.platform }}.node
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  # 可选：添加一个汇总任务，等待所有平台构建完成后执行
  summary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: echo "All whisper.cpp addons have been built successfully!"
