name: Build whisper.cpp addons

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches: [ builder ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13, windows-latest]
        include:
          - os: macos-latest
            platform: macos-arm64
          - os: macos-13
            platform: macos-x64
          - os: windows-latest
            platform: windows

    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Windows 平台依赖安装
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install cmake -y
          npm install -g cmake-js

      # macOS 平台依赖安装（保持不变）
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          brew install cmake
          npm install -g cmake-js

      # Windows 平台 CUDA 支持
      - name: Install CUDA Toolkit for Windows
        if: matrix.os == 'windows-latest'
        uses: devcontainers-contrib/action-cuda-toolkit@v1
        with:
          cuda: '12.2'  # 选择与驱动兼容的 CUDA 版本:cite[1]:cite[2]
          install-deps: true  # 自动安装依赖项

      # 设置 CUDA 环境变量
      - name: Set CUDA Path (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $env:PATH += ";$env:CUDA_PATH\bin"
          $env:CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2"
          Write-Output "CUDA Path: $env:CUDA_PATH"

      # Windows 平台编译（CUDA 支持）
      - name: Build for Windows with CUDA
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release `
            --CDBUILD_SHARED_LIBS=OFF `
            --CDWHISPER_STATIC=ON `
            --CDGGML_CUDA=ON `
            --CDCMAKE_CUDA_COMPILER="$env:CUDA_PATH\bin\nvcc.exe"  # 显式指定 nvcc 路径:cite[2]
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-windows.node

      # macOS 和 Linux 平台编译步骤（保持不变）
      # ...（原有 macOS 和 Linux 步骤）

      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-${{ matrix.platform }}
          path: artifacts/addon-${{ matrix.platform }}.node

      # 创建或更新 Release（保持不变）
      - name: Create/Update Release
        uses: softprops/action-gh-release@v1
        if: github.event_name != 'pull_request'
        with:
          tag_name: latest
          name: Latest whisper.cpp builds
          body: |
            Latest whisper.cpp addon builds for multiple platforms.
            - Windows (with CUDA support)
            - macOS Intel
            - macOS ARM (with CoreML support)
          files: |
            artifacts/addon-${{ matrix.platform }}.node
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: echo "All whisper.cpp addons have been built successfully!"
