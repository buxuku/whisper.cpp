name: Build whisper.cpp addons

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 0 * * 0'  # 每周日自动运行
  push:
    branches: [ builder ]  # 当有代码推送到builder分支时

jobs:
  # macOS ARM64 构建
  macos-arm64:
    runs-on: macos-latest
    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0

      - name: Install dependencies
        run: |
          brew install cmake
          npm install -g cmake-js

      - name: Build
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release \
            --CDBUILD_SHARED_LIBS=OFF \
            --CDWHISPER_STATIC=ON \
            --CDWHISPER_COREML=ON \
            --runtime=electron \
            --runtime-version=30.1.0 \
            --arch=arm64
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-macos-arm64.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-macos-arm64
          path: artifacts/addon-macos-arm64.node

  # macOS Intel 构建
  macos-intel:
    runs-on: macos-13
    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0

      - name: Install dependencies
        run: |
          brew install cmake
          npm install -g cmake-js

      - name: Build
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release \
            --CDBUILD_SHARED_LIBS=OFF \
            --CDWHISPER_STATIC=ON \
            --runtime=electron \
            --runtime-version=30.1.0 \
            --arch=x64
          mkdir -p artifacts
          cp build/Release/addon.node.node artifacts/addon-macos-x64.node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-macos-x64
          path: artifacts/addon-macos-x64.node

  # Windows CUDA 构建
  windows-cuda:
    runs-on: windows-2019
    strategy:
      matrix:
        cuda_version: ['11.8.0', '12.4.1', '12.2.0']
        build_type: ['optimized', 'generic']
        include:
          - cuda_version: '11.8.0'
            optimized: 'windows-cuda-118-optimized'
            generic: 'windows-cuda-118-generic'
          - cuda_version: '12.4.1'
            optimized: 'windows-cuda-1241-optimized'
            generic: 'windows-cuda-1241-generic'
          - cuda_version: '12.2.0'
            optimized: 'windows-cuda-1220-optimized'
            generic: 'windows-cuda-1220-generic'
    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Install dependencies
        run: |
          choco install cmake -y
          npm install -g cmake-js

      - name: Install CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.22
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_version }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      - name: Build
        shell: powershell
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          $env:CUDA_PATH = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          $env:CUDA_TOOLKIT_ROOT_DIR = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          
          # 构建参数基础部分
          $buildParams = @(
            "--CDBUILD_SHARED_LIBS=OFF",
            "--CDWHISPER_STATIC=ON",
            "--CDGGML_CUDA=ON",
            "--runtime=electron",
            "--runtime-version=30.1.0",
            "--arch=x64"
          )
          
          # 根据构建类型添加优化参数
          if ("${{ matrix.build_type }}" -eq "optimized") {
            $buildParams += "--CDCMAKE_CUDA_ARCHITECTURES=all"
            $outputName = "addon-${{ matrix[matrix.cuda_version].optimized }}.node"
          } else {
            $outputName = "addon-${{ matrix[matrix.cuda_version].generic }}.node"
          }
          
          # 执行构建
          npx cmake-js compile -T addon.node -B Release $buildParams
          
          mkdir -p artifacts
          Copy-Item "build/bin/Release/addon.node.node" -Destination "artifacts/$outputName"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-${{ matrix.cuda_version }}-${{ matrix.build_type }}
          path: artifacts/addon-${{ matrix.build_type == 'optimized' && matrix[matrix.cuda_version].optimized || matrix[matrix.cuda_version].generic }}.node

  # Windows no-cuda 构建
  windows-no-cuda:
    runs-on: windows-2019
    steps:
      - name: Clone whisper.cpp repository
        uses: actions/checkout@v3
        with:
          repository: ggerganov/whisper.cpp
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.14.0
          
      - name: Install dependencies
        run: |
          choco install cmake -y
          npm install -g cmake-js

      - name: Build
        run: |
          cd examples/addon.node
          npm install
          cd ../../
          npx cmake-js compile -T addon.node -B Release `
            --CDBUILD_SHARED_LIBS=OFF `
            --CDWHISPER_STATIC=ON `
            --runtime=electron `
            --runtime-version=30.1.0 `
            --arch=x64 `
            
          mkdir -p artifacts
          
          # 复制必要的运行时DLL
          Copy-Item "build/bin/Release/addon.node.node" -Destination "artifacts/addon-windows-no-cuda.node"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: addon-windows-no-cuda
          path: artifacts/addon-windows-no-cuda.node

  # Linux 构建
  # linux:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v1

  #     - name: Dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install build-essential git
  #         sudo apt-get install cmake
  #         sudo apt-get install libsdl2-dev

  #     - name: Use Node.js 20.14.0
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 20.14.0
  #         cache: 'npm'

  #     - name: Install package.json dependencies
  #       working-directory: ./examples/addon.node
  #       run: npm install

  #     - name: Compile addon.node
  #       run: |
  #         npx cmake-js compile -T addon.node -B Release --CDBUILD_SHARED_LIBS=OFF --CDWHISPER_STATIC=ON
  #         mkdir -p artifacts
  #         cp build/Release/addon.node.node artifacts/addon-linux.node

  # 创建或更新 Release
  create-update-release:
    needs: [macos-arm64, macos-intel, windows-no-cuda]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: List artifacts
        run: ls -R artifacts/
        
      - name: Create/Update Release
        uses: softprops/action-gh-release@v1
        if: github.event_name != 'pull_request'
        with:
          tag_name: latest
          name: Latest whisper.cpp builds
          body: |
            Latest whisper.cpp addon builds for multiple platforms.
            - Windows (with CUDA support)
            - Windows (without CUDA support)
            - macOS Intel
            - macOS ARM (with CoreML support)
          files: |
            artifacts/**/*.node
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}